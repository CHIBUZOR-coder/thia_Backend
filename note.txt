//user1
{
    "firstName": "Chibuzor",
    "lastName": "Emekalam",
    "email": "chibuzoremkalam@gmail.com",
    "phone": "09074639302",
    "address": "Presco Abakaliki",
    "password": "amakababe11",
    "confirmPassword": "amakababe11"
}

//user2
{
    "firstName": "Chinwendu",
    "lastName": "Bla",
    "email": "chinwe@gmail.com",
    "phone": "0967555",
    "address": "Presco",
    "password": "chinwendu11",
    "confirmPassword": "chinwendu11"
}





//user4
{
    "firstName": "olex",
    "lastName": "Emekalam",
    "email": "olexemkalam@gmail.com",
    "phone": "090746364755",
    "address": "Mary Land",
    "password": "amakababe11",
    "confirmPassword": "amakababe11"
}









//User4 Login
{ "email": "olexemkalam@gmail.com",
    "password": "amakababe11"
    
    }


//Admin1
{
    "firstName": "Zoe",
    "lastName": "Emekalam",
    "email": "chibuzormekalam@gmail.com",
    "phone": "09074639302",
    "address": "Uk",
    "password": "amakababe11",
    "role": "Admin",
    "confirmPassword": "amakababe11"
}





//user5
{
    "firstName": "Gods Power"
    "lastName": "Onyebuchi",
    "email": "godspower@gmail.com",
    "phone": "090746375867",
    "address": "Mary Land",
    "password": "amakababe11",
    "confirmPassword": "amakababe11"
}



//User5 Login
{ "email": "namo@gmail.com",
    "password": "amakababe11"
    
    }






//User5 Login
{ "email": "godspower@gmail.com",
    "password": "

//User6 Login
{ "email": "namo@gmail.com",
    "password": "amakababe11"
    
    }"
    
    }


//User7 Login
{ "email": "precious@gmail.com",
    "password": "amakababe11"
    
    }"
    
    













//Login Admin1
{
    "email": "chibuzormekalam@gmail.com",
    "password": "amakababe11",
}




//Add to cart
{
    "clothId": 4,
    "quantity": 3`
}
////////////////////////////////////////////////


import client from "../db.js";

export const AddToCart = async (req, res) => {
  try {
    const { clothId, quantity } = req.body;

    //Find the user cart if it exixt
    let userCart = await client.query(
      `SELECT userr.id AS userId 
     FROM userr 
     JOIN cart ON cart.userId = userr.id 
     WHERE userr.id = $1`,
      [req.user.id]
    );

    // //Alternative to Find the user cart if it exixt
    // let userCart = await client.query("SELECT * FROM cart WHERE userId = $1", [
    //   req.user.id,
    // ]);

    //create userCart if not existing
    if (userCart.rowCount === 0) {
      userCart = await client.query(
        "INSERT INTO cart (userId) VALUES($1)  RETURNING * ",
        [req.user.id]
      );
    }

    //check if  cloth that is to be added in the cart exists in cart
    // Check if the cloth exists in the database
    const cloth = await client.query(
      `SELECT id, price FROM cloth WHERE id = $1`,
      [clothId]
    );

    if (cloth.rowCount === 0)
      return res
        .status(400)
        .json({ success: false, message: "Product not found" });

    //Find the cart item if it exist
    // let cartItem = await client.query(
    //   "SELECT * FROM cartItems WHERE cartId=$1 AND clothsId=$2 ",
    //   [userCart.id, cloth.id]
    // );
    //Find the cart item if it exist
    let cartItem = await client.query(
      "SELECT * FROM cartItems WHERE cartId = $1 AND clothsId = $2",
      [userCart.rows[0].id, cloth.rows[0].id]
    );

    //Update cartItems if it is found
    if (cartItem.rowCount > 0) {
      cartItem = await client.query(
        "UPDATE cartItems SET quantity = $1, amount = $2 WHERE id = $3 RETURNING *",
        [
          cartItem.rows[0].quantity + quantity,
          cloth.rows[0].price * (cartItem.rows[0].quantity + quantity),
          cartItem.rows[0].id,
        ]
      );

      return res.status(200).json({
        success: true,
        message: "Cart item updated successfully",
        data: cartItem.rows[0],
      });
    } else {
      cartItem = await client.query(
        "INSERT INTO  cartItems (cartId,  clothsId,  amount,  quantity) VALUES($1, $2, $3, $4)  RETURNING*",
        [userCart.rows[0].id, clothId, cloth.rows[0].price * quantity, quantity]
      );
      return res.status(200).json({
        success: true,
        message: "product added to cart successfully",
        data: cartItem.rows[0],
      });
    }
  } catch (error) {
    console.error({ message: error.message, stack: error.stack });
    return res
      .status(500)
      .json({ success: false, message: "Internal server error" });
  }
};





SELECT firstName, clothsId, cartItems.amount, quantity, cloth.brand, cloth.category  FROM userr JOIN cart ON cart.userId = userr.id JOIN cartItems ON cartItems.cartId = cart.id JOIN cloth ON cartItems.clothsId = cloth.id  WHERE userr.id = 4;


SELECT amount, quantity, brand, style, price, size FROM cart  JOIN cartItems ON  cart.id = cartItems.cartId JOIN cloth ON cartItems.clothsId = cloth.id WHERE cart.id = 3
;







































import React, { useContext, useState } from "react";
import Banner from "./Banner";
import { BlogContext } from "./Context/EcomContext";
import { Link } from "react-router-dom";

function BlogListItem() {
  const { fetchedData } = useContext(BlogContext);
  const [activePage, setPage] = useState(1);

  const pageShow = [
    { page: 1 },
    { page: 2 },
    { page: 3 },
  ];

  const selected1 = fetchedData.filter((data) => data.id <= 5);
  const selected2 = fetchedData.filter((data) => data.id >= 6 && data.id <= 10);
  const selected3 = fetchedData.filter((data) => data.id >= 11 && data.id <= 15);
  const [itemsToShow, setItemsTshow] = useState(selected1);

  // Handle page click logic
  const HandlePage_Active = (pageNum) => {
    setPage(pageNum); // Set the active page
    if (pageNum === 1) setItemsTshow(selected1); // Update items for page 1
    else if (pageNum === 2) setItemsTshow(selected2); // Update items for page 2
    else setItemsTshow(selected3); // Update items for page 3
  };

  return (
    <div className="bg-blue-200 w-[55rem] m-auto flex flex-col gap-2">
      <div className="w-[100%] pb-20">
        <Banner />
      </div>
      {itemsToShow.map((Blog) => (
        <div
          key={Blog.id}
          className="w-full p-5 flex gap-2 justify-center items-center"
        >
          <Link
            to={"/"}
            style={{
              backgroundImage: url(./img/${Blog.image}),
              backgroundPosition: "center",
              backgroundSize: "cover",
            }}
            className="w-[40%] h-48 p-5"
          ></Link>
          <div className="flex w-[40%] h-48 flex-col">
            <div className="font-semibold text-xl">{Blog.head}</div>
            <div className="font-semibold">{Blog.text}</div>
          </div>
        </div>
      ))}

      <div className="flex justify-center items-center w-full p-2 gap-4">
        {pageShow.map((num) => (
          <p
            onClick={() => HandlePage_Active(num.page)} // Call HandlePage_Active with page number
            className={`rounded-full ${
              activePage === num.page ? "bg-red-400" : "bg-gray-500"
            } cursor-pointer h-8 w-8 flex justify-center items-center`}
          >
            {num.page}
          </p>
        ))}
      </div>
    </div>
  );
}

export default BlogListItem;














 {cartitems.map((item) => (
                            <tr key={item.id} className="font-semibold">
                              <td>
                                {UserInfo ? item.style : item.product.style}
                              </td>
                              <td>
                                {UserInfo ? item.sizee : item.product.size}
                              </td>
                              <td>
                                {UserInfo
                                  ? item.quantity
                                  : item.product.quantity}
                              </td>
                              <td>
                                ${UserInfo ? item.amount : item.product.amount}
                              </td>
                              <td className="flex justify-center items-center">
                                <img
                                  src={
                                    UserInfo ? item.image : item.product.image
                                  }
                                  alt={
                                    UserInfo ? item.image : item.product.image
                                  }
                                  className="h-[50px] w-[40px] object-cover"
                                />
                              </td>
                            </tr>
                          ))}